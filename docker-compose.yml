version: "2"
services:
  socket-service:
    depends_on:
      - service-db
    build:
      context: ./user
      dockerfile: Dockerfile
    container_name: socket_service
    restart: always
    command: php artisan websockets:serve
    tty: true
    environment:
      container_url: socket-socket
    ports:
      - 6001:6001
    volumes:
      - ./user:/app
    networks:
      - service-network

  service-member:
    depends_on:
      - service-db
    build:
      context: ./member
      dockerfile: Dockerfile
    container_name: member_service
    restart: always
    tty: true
    environment:
      container_url: service-member
    ports:
      - 9091:80
    volumes:
      - ./member:/app
    networks:
      - service-network

  service-user:
    depends_on:
      - service-db
    build:
      context: ./user
      dockerfile: Dockerfile
    container_name: user_service
    restart: always
    tty: true
    environment:
      container_url: service-user
      message_url: service-message
      room_url: service-room
      member_url: service-member
    ports:
      - 9090:80
    volumes:
      - ./user:/app
    networks:
      - service-network

  service-message:
    depends_on:
      - service-db
    build:
      context: ./message
      dockerfile: Dockerfile
    container_name: message_service
    restart: always
    tty: true
    environment:
      container_url: service-message
    ports:
      - 9000:80
    volumes:
      - ./message:/app
    networks:
      - service-network

  service-db:
    image: mysql:5.7.22
    container_name: service_db
    restart: unless-stopped
    tty: true
    ports:
      - "5000:3306"
    environment:
      MYSQL_DATABASE: room_service
      MYSQL_ROOT_PASSWORD: password
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    networks:
      - service-network
    volumes:
      - service:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: service_phpmyadmin
    links:
      - service-db:db
    ports:
      - 8181:80
    environment:
      MYSQL_ROOT_PASSWORD: password
    networks:
      - service-network

  service-room:
    depends_on:
      - service-db
    build:
      context: ./room
      dockerfile: Dockerfile
    container_name: room_service
    restart: always
    tty: true
    environment:
      container_url: service-room
    ports:
      - 8000:80
    volumes:
      - ./room:/app
    networks:
      - service-network

volumes:
  service:
networks:
  service-network:
    driver: bridge
